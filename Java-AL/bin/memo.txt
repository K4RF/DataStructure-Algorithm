필요한 자료구조 선언하기(그래프 정보 저장, 최단 거리 저장, 노드 사용 여부 저장)
N(노드 수), M(엣지 수)
선언한 변수들을 초기화하기
거리 배열은 충분히 큰 수로 초기화하기
for(노드 개수){
    그래프 정보를 저장하는 인접 리스트 초기화하기
}
for(엣지 개수){
    인접 리스트 배열에 이 엣지 정보 저장하기
}
startIndex(시작점)
endIndex(도착점)
시작점을 기준으로 다익스트라 수행
최단 거리 배열에서 목적지 길이를 찾아 출력하기
다익스트라(시작점, 종료점){
    시작점을 오름차순 우선순위 큐에 넣고 시작

    while(큐가 빌 때까지){
        현재 선택된 노드가 방문한 적이 있는지 확인
        현재 노드를 방문 노드로 업데이트
        for(현재 선택 노드의 엣지 개수){
            if(타깃 노드 방문 전이고 현재 선택 노드 최단 거리 + 비용 < 타깃 노드의 최단 거리이면){
                타깃 노드 최단 거리 업데이트
                우선순위 큐에 타깃 노드 추가
            }
        }
    }

    Edge{
        vertext(가리키는 노드)
        value(엣지의 가중치)
        우선순위 큐 정렬 기준을 위해 compareTo() 함수 구현하기
    }
}