tree(세그먼트 트리 배열)
N(수의 개수), M(변경이 일어나는 개수), K(구한 합을 구하는 개수)
MOD(1000000007)
treeSize 구하기 -> Math.pow(2, 트리의 높이 + 1)
leftNodeStartIndex 구하기 -> treeSize / 2- 1;
tree 초기화하기
tree 배열의 리프 노드 영역에 데이터 입력받기
setTree(트리의 크기)

for(M + K만큼 반복하기){
    a(질의 유형), s(시작 인덱스), e(변경값 또는 종료 인덱스)
    a가 1일 때 -> changeVal(tree에서 시작 인덱스, e(변경값))
    a가 2일 때 -> getMul(tree에서 시작 인덱스, tree에서 종료 인덱스)
}

getMul(시작 인덱스, 종료 인덱스){
    while(시작 인덱스와 종료 인덱스가 교차될 때까지){
        if(시작 인덱스 % 2 == 1) 해당 노드의 값을 구간 곱에 곱하기 % MOD
        if(종료 인덱스 % 2 == 0) 해당 노드의 값을 구간 곱에 곱하기 % MOD
            시작 인덱스 = 시작 인덱스 / 2
            종료 인덱스 = 종료 인덱스 / 2
    }
    구간 곱 결과 리턴하기
}

changeVal(시작 인덱스, 변경값){
    현재 index에 변경값 저장하기
    while(시작 인덱스가 1보다 크다){
        시작 인덱스 = 시작 인덱스 . 2
        시작 인덱스의 트리값 = 시작 인데스 * 2의 트리값 % MOD * 시작 인덱스 * 2 + 1의 트리값 % MOD
    }
}

setTree(트리의 마지막 인덱스){
    while(인덱스가 루트가 아닐 때까지 반복하기){
        트리의 인덱스 / 2 부분(부모 노드)에 현재 index의 트리값 곱하기 % MOD
        index 1개 감소
    }
}