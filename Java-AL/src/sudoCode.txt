N(노드 개수) M(엣지 개수)
K(몇 번쨰 최단 경로를 구해야 하는지 나타내는 변수)
W(그래프 정보 저장 인접 행렬)
    for(노드 개수 +1)
    {
        최단 거리 큐 배열 초기화하기
    }
    for(엣지 개수){
        인접 행렬에 엣지 정보를 저장하기
    }
    다익스트라 알고리즘 수행하기
    출발 노드는 우선순위 큐에 넣고 시작하기
    while(큐가 빌 떄까지){
        for(노드 개수만큼 반복하기){
            if(해당 노드와 현재 노드가 연결돼 있으면){
                if(최단 거리 배열 큐에 해당 노드에 관해 저장된 경로가 K개보다 작으면)
                    최단 거리 큐 배열에 거리 정보 삽입하고 큐에 선택 노드를 추가하기
                else if(최단 거리 큐의 마지막 값 > 이전 노드의 값 + 두 노드 사이의 엣지 가중치){
                    해당 노드에 최단 거리 큐에 마지막값 삭제하고 신규값으로 업데이트하기
                    큐에 선택 노드를 추가하기
                }
            }
        }
    }
    for(노드 개수){
        우선순위 큐 크기가 K이면 큐의 값 출력, 아니면 -1 출력
    }
    Node{
        node(가리키는 노드)
        cost(엣지의 가중치)
            우선순위 큐 정렬 기준을 위해 compareTo 함수 구현하기
    }