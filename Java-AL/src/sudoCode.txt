N(도시 개수), M(엣지 개수)
sCity(시작 도시), eCity(종료 도시)
Edges(엣지 리스트 배열), cityMoney(각 도시에서 버는 수입 배열)
거리 배열은 충분히 큰 작은 수로 초기화하기(Long.MIN_VALUE)
for(엣지 개수){
    엣지 리스트 배열에 이 엣지 정보를 저장하기
}
거리 배열에 출발 노드 cityMoney[출발 노드]로 초기화하기
for(노드 개수 + 100){
    for(엣지 개수){
        현재 엣지 데이터 가져오기
        if(출발 노드가 방문하지 않은 노드 -> 값이 Long.MIN_VALUE) Skip
        else if(출발 노드가 양수 사이클에 연결된 노드 -> 값이 Long.MAX_VALUE)
            종료 노드를 양수 사이클에 연결된 노드로 업데이트 -> 값 = Long.MAX_VALUE
        else if(종료 노드의 값 < 출발 노드의 값 + 도착 도시에서의 수입 - 엣지의 가중치)
            종료 노드의 값을 출발 노드의 값 + 도착 도시에서의 수입 - 엣지의 가중치로 업데이트
        if(N-1 반복 이후 업데이트될 때) 이 종료 노드를 양수 사이클 연결 노드로 업데이트
    }
}

도착 도시가 Long.MIN_VALUE -> 도착 불가 -> "gg" 출력하기
도착 도시가 Long.MAX_VALUE -> 돈을 무한대로 벌 수 있음 -> "gee" 출력하기
이외의 경우 -> 도착 도시의 값 출력하기

Edge{
    start(출발 노드)
    end(종료 노드)
    value(엣지의 가중치)
}